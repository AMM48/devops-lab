#!/bin/bash

YELLOW='\033[1;33m'
RED='\033[0;31m'
CYAN='\033[0;36m'
NOCOLOR='\033[0m'

deleteLogs=false
schedule=false
# Source directory to be compressed
dir=""
# Destination directory to store archived logs
archiveDir=""
# S3 URI to store archived logs on S3
s3=""
# Fetch date and time
dateY=$(date '+%Y%m%d')
dateT=$(date '+%H%M%S')
# Tar file directory
fileDir=""

usage () {
  echo -e "${YELLOW}Usage: log-archive ${CYAN}-l <log-directory> -a <archive-directory> [-s <S3-URI>] [-d] [-t]"
  echo
  echo -e "${RED}Required:"
  echo "     -l <log-directory>  Directory containing logs to archive (e.g. /var/log/logs-dir)"
  echo "     -a <archive-directory> Local directory where archived logs will be stored (e.g. /var/log/compressed)"
  echo
  echo -e "${CYAN}Optional:"
  echo "     -s <S3-URI>         S3 URI to store archived logs on an S3 bucket (e.g. s3://amzn-s3-logs-bucket)"
  echo "     -d                  Delete original log files after they have been archived."
  echo "     -t                  Schedule the script as a daily cron job."
}

# Check if directory doesn't exist
directory_not_exists () {
  local dir=$1
  if [[ ! -d "$dir" ]]; then
    echo "Error: Directory '$dir' doesn't exist."
    exit 1
  fi
}

# Check if S3 URI is invalid
invalid_s3_uri () {
  if [[ ! "$s3" =~ ^s3://[a-z0-9.-]{3,63}$ ]]; then
    echo "Error: Invalid S3 URI $s3"
    exit 1
  fi
}

compress_logs () {
  # Compress the folder and store it in the archive directory
  tar -czf $fileDir -C $dir .

  # Check if compression was successful
  if [[ $? == 0 ]]; then
    echo "Logs archived and stored into '$archiveDir' successfully"
  else
    echo "Error happened while archiving logs"
    if [[ -f $fileDir ]]; then
      rm $fileDir
    fi
    exit 1
  fi
}

upload_s3 () {
  #Upload archive to S3 Bucket if user provided S3 URI
  if [[ -n "$s3"  ]]; then
    aws s3 cp $fileDir $s3
    if [[ $? == 0  ]]; then
      echo "Logs archived and uploaded to S3 successfully"
    else
      echo "Error happened while uploading logs to S3"
      exit 1
    fi
  fi
}

delete_logs () {
  if [[ $deleteLogs == true ]]; then
    rm -rf $dir/*
    echo "Logs deleted successfully"
  fi
}

scheduler () {
  if [[ $schedule == true ]]; then
    cron="0 0 * * * /usr/local/bin/log-archive -l $dir -a $archiveDir"

    # Append optional flags to the cron command if they are provided
    [[ $deleteLogs == true ]] && cron+=" -d"
    [[ -n $s3 ]] && cron+=" -s $s3"

    # Add the cron job if it does not already exist
    (crontab -l 2>/dev/null | grep -F "$cron" > /dev/null 2>&1) || {
      (crontab -l 2>/dev/null; echo "$cron") | crontab - && echo "Cron job added."
    }
  fi
}

while getopts 'l:a:s:dt' OPTION; do
  case "$OPTION" in
    l)
      dir="$OPTARG"
      directory_not_exists $dir
      ;;
    a)
      archiveDir="$OPTARG"
      directory_not_exists $archiveDir
      fileDir=$archiveDir/logs_archive_${dateY}_${dateT}.tar.gz
      ;;
    s)
      s3="$OPTARG"
      invalid_s3_uri
      ;;
    d)
      deleteLogs=true
      ;;
    t)
      schedule=true
      ;;
    *)
      usage
      exit 1
      ;;
  esac
done
shift "$(($OPTIND -1))"

if [[ -z "$dir" || -z "$archiveDir" ]]; then
  echo "Error: missing required flags."
  usage
  exit 1
fi

compress_logs
upload_s3

delete_logs
scheduler